// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using weatherlogr.Repository.MySql;

#nullable disable

namespace weatherlogr.Repository.MySql.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20230220042444_NonNullUnits")]
    partial class NonNullUnits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("weatherlogr.Repository.MySql.Models.StationCollector", b =>
                {
                    b.Property<string>("StationIdentifier")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTimeOffset?>("LastCollectionEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PickupCronSchedule")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("StationIdentifier");

                    b.ToTable("StationCollector");
                });

            modelBuilder.Entity("weatherlogr.Repository.MySql.Observation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BarometricPressureId")
                        .HasColumnType("bigint");

                    b.Property<long>("DewPointId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("HeatIndexId")
                        .HasColumnType("bigint");

                    b.Property<long>("HumidityId")
                        .HasColumnType("bigint");

                    b.Property<string>("ObsDescription")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StationID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<long>("TemperatureId")
                        .HasColumnType("bigint");

                    b.Property<long>("VisibilityId")
                        .HasColumnType("bigint");

                    b.Property<long>("WindChillId")
                        .HasColumnType("bigint");

                    b.Property<long>("WindGustId")
                        .HasColumnType("bigint");

                    b.Property<long>("WindSpeedId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("BarometricPressureId");

                    b.HasIndex("DewPointId");

                    b.HasIndex("HeatIndexId");

                    b.HasIndex("HumidityId");

                    b.HasIndex("StationID");

                    b.HasIndex("TemperatureId");

                    b.HasIndex("VisibilityId");

                    b.HasIndex("WindChillId");

                    b.HasIndex("WindGustId");

                    b.HasIndex("WindSpeedId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("weatherlogr.Repository.MySql.RadarIndex", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("RadarDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID");

                    b.ToTable("RadarIndices");
                });

            modelBuilder.Entity("weatherlogr.Repository.MySql.UnitValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("UnitCode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("UnitValues");
                });

            modelBuilder.Entity("weatherlogr.Repository.MySql.Observation", b =>
                {
                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "BarometricPressure")
                        .WithMany()
                        .HasForeignKey("BarometricPressureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "DewPoint")
                        .WithMany()
                        .HasForeignKey("DewPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "HeatIndex")
                        .WithMany()
                        .HasForeignKey("HeatIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "Humidity")
                        .WithMany()
                        .HasForeignKey("HumidityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.Models.StationCollector", "Station")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "Visibility")
                        .WithMany()
                        .HasForeignKey("VisibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "WindChill")
                        .WithMany()
                        .HasForeignKey("WindChillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "WindGust")
                        .WithMany()
                        .HasForeignKey("WindGustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weatherlogr.Repository.MySql.UnitValue", "WindSpeed")
                        .WithMany()
                        .HasForeignKey("WindSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BarometricPressure");

                    b.Navigation("DewPoint");

                    b.Navigation("HeatIndex");

                    b.Navigation("Humidity");

                    b.Navigation("Station");

                    b.Navigation("Temperature");

                    b.Navigation("Visibility");

                    b.Navigation("WindChill");

                    b.Navigation("WindGust");

                    b.Navigation("WindSpeed");
                });
#pragma warning restore 612, 618
        }
    }
}
